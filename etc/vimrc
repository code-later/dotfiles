" -----------------------------------------------------------------------------
" |                            VIM Settings                                   |
" |                   (see gvimrc for gui vim settings)                       |
" |                                                                           |
" | Some highlights:                                                          |
" |   ,d = toggle NERDTree off and on                                         |
" |                                                                           |
" |   ,f = fuzzy find all files                                               |
" |   ,P = go to previous file                                                |
" |                                                                           |
" |   <C-l> = inserts '=>'                                                    |
" |                                                                           |
" |   ,h = new horizontal window                                              |
" |   ,v = new vertical window                                                |
" |                                                                           |
" |   ,i = toggle invisibles                                                  |
" |                                                                           |
" |   :call Tabstyle_tabs = set tab to real tabs                              |
" |   :call Tabstyle_spaces = set tab to 2 spaces                             |
" |                                                                           |
" | Put machine/user specific settings in ~/.vimrc.local                      |
" -----------------------------------------------------------------------------

" Initial stuff ***************************************************************

set nocompatible " Must come first because it changes other options.
filetype off     " required for vundle
let mapleader = ","


" Vundle **********************************************************************

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" Bundles *********************************************************************

Bundle 'tpope/vim-fugitive'

Bundle 'tpope/vim-ragtag'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'tsaleh/vim-align'
Bundle 'vim-scripts/ZoomWin'
Bundle 'sickill/vim-pasta'
Bundle 'tpope/vim-endwise'

Bundle 'tpope/vim-liquid'

Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-cucumber'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'

Bundle 'mileszs/ack.vim'

Bundle 'sjl/gundo.vim'

Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'Raimondi/delimitMate'
Bundle 'kchmck/vim-coffee-script'
Bundle 'pangloss/vim-javascript'
Bundle 'railsbros-dirk/Vim-Tomorrow-Theme'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'tomtom/tlib_vim'

Bundle 'garbas/vim-snipmate'

" File Navigation *************************************************************

Bundle 'L9'
Bundle 'markabe/bufexplorer'
Bundle 'wincent/Command-T'

nmap <Leader>f :CommandT<CR>
let g:CommandTMaxHeight=5

" Tabs ************************************************************************
"set sta " a <Tab> in an indent inserts 'shiftwidth' spaces

function! Tabstyle_tabs()
  " Using 4 column tabs
  set softtabstop=4
  set shiftwidth=4
  set tabstop=4
  set noexpandtab
  autocmd User Rails set softtabstop=4
  autocmd User Rails set shiftwidth=4
  autocmd User Rails set tabstop=4
  autocmd User Rails set noexpandtab
endfunction

function! Tabstyle_spaces()
  " Use 2 spaces
  set softtabstop=2
  set shiftwidth=2
  set tabstop=2
  set smarttab
  set expandtab
endfunction

call Tabstyle_spaces()


" Indenting *******************************************************************
set ai " Automatically set the indent of a new line (local to buffer)
set si " smartindent (local to buffer)
filetype plugin indent on " Turn on file type detection.
syntax enable " Turn on syntax highlighting.
set ofu=syntaxcomplete#Complete
set completeopt=longest,menuone
set complete-=i


" Scrollbars ******************************************************************
set sidescrolloff=2
set numberwidth=4


" Windows *********************************************************************
set equalalways " Multiple windows, when created, are equal in size
set splitbelow splitright

" Vertical and horizontal split then hop to a new buffer
:noremap <Leader>v :vsp<cr>
:noremap <Leader>h :split<cr>


" Cursor highlights ***********************************************************
set cursorline
"set cursorcolumn


" Runtime *********************************************************************
runtime macros/matchit.vim " Load the matchit plugin.
runtime snippets/support_functions.vim " Load the snippet support functions

" Searching *******************************************************************
set hlsearch  " highlight search
set incsearch  " Incremental search, search as you type
set ignorecase " Ignore case when searching
set smartcase " Ignore case when searching lowercase


" Colors **********************************************************************
"set t_Co=256 " 256 colors
set background=dark
syntax on " syntax highlighting
"let g:solarized_termcolors=256
"colorscheme solarized
"let g:molokai_original=1
"colorscheme molokai
colorscheme Tomorrow-Night-Bright


" Status Line *****************************************************************
set showcmd
set ruler " Show ruler
"set ch=2 " Make command line two lines high
"match LongLineWarning '\%120v.*' " Error format when a line is longer than 120
set showmode " Display the mode you're in.
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P



" Line Wrapping ***************************************************************
set nowrap
"set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.
set linebreak  " Wrap at word
set nolist
set formatoptions=tq
set wrapmargin=4
set textwidth=120
set formatoptions+=l

" Directories *****************************************************************
set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.

" Set Swap directory
set directory=$HOME/.vim/tmp//  " Keep swap files in one location

" Sets path to directory buffer was loaded from
"autocmd BufEnter * lcd %:p:h


" File Stuff ******************************************************************
filetype plugin indent on
" To show current filetype use: set filetype

"autocmd FileType html :set filetype=xhtml


" Sessions ********************************************************************
" Sets what is saved when you save a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize


" Invisible characters *********************************************************
set listchars=trail:.,tab:>-
set list
:noremap <Leader>i :set list!<CR> " Toggle invisible chars


" Misc settings ***************************************************************
" Syntax coloring lines that are too long just slows down the world
set synmaxcol=255

set ttyfast " u got a fast terminal
set ttyscroll=3
set lazyredraw " to avoid scrolling problems

set backspace=indent,eol,start " Intuitive backspacing.
set number " Show line numbers
set vb t_vb= " Turn off bell, this could be more annoying, but I'm not sure how
set hidden " Handle multiple buffers better.
map Q <Esc> " Get rid of awkward Ex-mode
"map U :redo<CR>
set shell=/bin/bash " Some commands seem to have problems with zsh"
set laststatus=2 " Show the status line all the time
set autoindent
set smartindent
set title " Set the terminal's title
set wildignore+=log,tmp,*.swp
set clipboard=unnamed " Copy to system pasteboard

" Syntax checking for ruby
map <Leader>c :!ruby -c %<CR>

" Set encoding
set encoding=utf-8

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

set noballooneval

" Enable auto-save / auto-write
set autowrite
set autowriteall
au BufLeave,FocusLost * silent! :wa

" :W to save with sudo
command W w !sudo tee % > /dev/null

" Folding *********************************************************************
" Automatic fold settings for specific files. Uncomment to use.
autocmd FileType ruby set foldmethod=syntax
autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2
set nofoldenable " Turn on folding
set foldmethod=syntax " Folding based on syntax
set foldlevel=1

"Sourced from vim tip: http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

" Navigation ******************************************************************

" Make cursor move by visual lines instead of file lines (when wrapping)
map <up> gk
map k gk
imap <up> <C-o>gk
map <down> gj
map j gj
imap <down> <C-o>gj
map E ge

map <Leader>H :vertical res -5<CR>
map <Leader>L :vertical res +5<CR>
map <Leader>K :res +5<CR>
map <Leader>J :res -5<CR>

map <Leader>P <C-^> " Go to previous file

" Remove trailing spaces
function RemoveTrailingSpaces()
  %s/\v[\t ]{-1,}$//g
endfunction

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways


" Ruby stuff ******************************************************************
"compiler ruby         " Enable compiler support for ruby
"map <F5> :!ruby %<CR>


" Omni Completion *************************************************************
autocmd FileType html :set omnifunc=htmlcomplete#CompleteTags
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
" May require ruby compiled in
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete


" Hard to type *****************************************************************
imap <C-l> <space>=><space>


" -----------------------------------------------------------------------------
" |                              Plug-ins                                     |
" -----------------------------------------------------------------------------

" NERDTree ********************************************************************
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
let NERDTreeHijackNetrw=1 " User instead of Netrw when doing an edit /foobar
let NERDTreeMouseMode=1 " Single click for everything


" Commenter **************************************************************

Bundle 'scrooloose/nerdcommenter'

map <leader>/ <plug>NERDCommenterToggle


" Unimpaired *********************************************************
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv


" fuzzyfinder ********************************************************
" map <Leader>b :FufBuffer<CR>


" autocomplpop ***************************************************************
let g:acp_enableAtStartup = 0
let g:acp_mappingDriven = 1
let g:acp_behaviorRubyOmniSymbolLength = 2


" railsvim ***************************************************************
map <Leader>r <Plug>RubyTestRun " change from <Leader>t to <Leader>\
map <Leader>R <Plug>RubyFileRun " change from <Leader>T to <Leader>]
let g:rubycomplete_rails = 1


" Javascript *************************************************************
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery

" Markdown ***************************************************************

Bundle 'matthias-guenther/hammer.vim'

function s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Hammer<CR>
endfunction

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" make and python use real tabs
au FileType make                                     set noexpandtab
au FileType python                                   set noexpandtab

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.txt call s:setupWrapping()

" toggles the Gundo graph
nnoremap <F5> :GundoToggle<CR>

" set the tmp path for markdown-preview
let g:MarkdownPreviewTMP = '/tmp/vim-markdown-preview'

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Use modeline overrides
set modeline
set modelines=10

" Turn off jslint errors by default
let g:JSLintHighlightErrorLine = 0

" Show (partial) command in the status line
set showcmd

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
