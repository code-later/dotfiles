" -----------------------------------------------------------------------------
"
"
" |                            VIM Settings                                   |
" |                              GUI stuff                                    |
" -----------------------------------------------------------------------------


" OS Specific *****************************************************************
if has("gui_macvim")

  set fuoptions=maxvert,maxhorz     " fullscreen options (MacVim only), resized window when changed to fullscreen
  set guifont=DejaVuSansMono:h11
  set antialias                     " MacVim: smooth fonts.
  set encoding=utf-8                " Use UTF-8 everywhere.
  set guioptions-=T                 " Hide toolbar.
  set guioptions-=L
  set guioptions+=r
  set transparency=15

  macmenu &File.New\ Tab key=<nop>

  macmenu Window.Toggle\ Full\ Screen\ Mode key=<D-CR>
  " Command-Shift-F for Ack
  map <D-F> :Ack<space>

  " Run Ruby file
  map <D-r> :call RunRuby()<CR>

  " Command-][ to increase/decrease indentation
  map <D-]> V>gv<ESC>
  vmap <D-]> >gv
  imap <D-]> <ESC>V>gv<ESC>i
  map <D-[> V<gv<ESC>
  vmap <D-[> <gv
  imap <D-[> <ESC>V<gv<ESC>i

  " Toggle commenting on 1 line or all selected lines. Wether to comment or not
  " is decided based on the first line; if it's not commented then all lines
  " will be commented
  aunmenu Window.Zoom
  "macmenu &Window.Zoom key=<nop>
  map <D-/> <Leader>/

  map <C-S-d> Vyp " duplicate current line
  map <D-d> dd " delete current line
  imap <D-d> <ESC>ddi

  " Command-Option-ArrowKey to switch viewports
  aunmenu Window.Select\ Next\ Tab
  aunmenu Window.Select\ Previous\ Tab
  map <D-M-Up> <C-w>k
  imap <D-M-Up> <Esc> <C-w>k
  map <D-M-Down> <C-w>j
  imap <D-M-Down> <Esc> <C-w>j
  map <D-M-Right> <C-w>l
  imap <D-M-Right> <Esc> <C-w>l
  map <D-M-Left> <C-w>h
  imap <D-M-Left> <C-w>h

  " Adjust viewports to the same size
  map <Leader>= <C-w>=
  imap <Leader>= <Esc> <C-w>=

  " don't use system pasteboard for macvim
  set clipboard=
end

" General *********************************************************************

" set transparency=95
set background=dark

" Default size of window
set columns=189
set lines=61

" Tab headings
set gtl=%t gtt=%F

" ZoomWin configuration
map <S-C-CR> :ZoomWin<CR>

let g:rubytest_cmd_feature = "cucumber --no-color %p"
let g:rubytest_cmd_story = "cucumber --no-color %p -n '%c'"

colorscheme Tomorrow-Night-Bright

" Project Tree
autocmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))
autocmd FocusGained * call s:UpdateNERDTree()
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" If the parameter is a directory, cd into it
function s:CdIfDirectory(directory)
  let explicitDirectory = isdirectory(a:directory)
  let directory = explicitDirectory || empty(a:directory)

  if explicitDirectory
    exe "cd " . a:directory
  endif

  if directory
    NERDTree
    wincmd p
    bd
  endif

  if explicitDirectory
    wincmd p
  endif
endfunction

" NERDTree utility function
function s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif

  if exists(":CommandTFlush") == 2
    CommandTFlush
  endif
endfunction

" Utility functions to create file commands
function s:CommandCabbr(abbreviation, expansion)
  execute 'cabbrev ' . a:abbreviation . ' <c-r>=getcmdpos() == 1 && getcmdtype() == ":" ? "' . a:expansion . '" : "' . a:abbreviation . '"<CR>'
endfunction

function s:FileCommand(name, ...)
  if exists("a:1")
    let funcname = a:1
  else
    let funcname = a:name
  endif

  execute 'command -nargs=1 -complete=file ' . a:name . ' :call ' . funcname . '(<f-args>)'
endfunction

function s:DefineCommand(name, destination)
  call s:FileCommand(a:destination)
  call s:CommandCabbr(a:name, a:destination)
endfunction

" Public NERDTree-aware versions of builtin functions
function ChangeDirectory(dir, ...)
  execute "cd " . a:dir
  let stay = exists("a:1") ? a:1 : 1

  NERDTree

  if !stay
    wincmd p
  endif
endfunction

function Touch(file)
  execute "!touch " . a:file
  call s:UpdateNERDTree()
endfunction

function Remove(file)
  let current_path = expand("%")
  let removed_path = fnamemodify(a:file, ":p")

  if (current_path == removed_path) && (getbufvar("%", "&modified"))
    echo "You are trying to remove the file you are editing. Please close the buffer first."
  else
    execute "!rm " . a:file
  endif

  call s:UpdateNERDTree()
endfunction

function Mkdir(file)
  execute "!mkdir " . a:file
  call s:UpdateNERDTree()
endfunction

function RunRuby()
  if !getbufvar("%", "&saved")
    let tmpfile = tempname()
    exe "write " . tmpfile . ".rb"
  endif

  execute "!ruby %"
endfunction

function Edit(file)
  if exists("b:NERDTreeRoot")
    wincmd p
  endif

  execute "e " . a:file

ruby << RUBY
  destination = File.expand_path(VIM.evaluate(%{system("dirname " . a:file)}))
  pwd         = File.expand_path(Dir.pwd)
  home        = pwd == File.expand_path("~")

  if home || Regexp.new("^" + Regexp.escape(pwd)) !~ destination
    VIM.command(%{call ChangeDirectory(system("dirname " . a:file), 0)})
  end
RUBY
endfunction

" Define the NERDTree-aware aliases
call s:DefineCommand("cd", "ChangeDirectory")
call s:DefineCommand("touch", "Touch")
call s:DefineCommand("rm", "Remove")
call s:DefineCommand("e", "Edit")
call s:DefineCommand("mkdir", "Mkdir")

if filereadable(expand("~/.gvimrc.local"))
  source ~/.gvimrc.local
endif

